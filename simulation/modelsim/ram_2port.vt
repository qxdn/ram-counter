// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/28/2019 11:52:50"
                                                                                
// Verilog Test Bench template for design : ram_2port
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 100 ns/ 100 ns
module ram_2port_vlg_tst();
// constants                                           
// general purpose registers
// test vector input registers
reg clock;
reg [7:0] data;
reg [3:0] rdaddress;
reg [3:0] wraddress;
reg wren;
reg rden;
// wires                                               
wire [7:0]  q;

// assign statements (if any)                          
ram_2port i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.data(data),
	.q(q),
	.rdaddress(rdaddress),
	.wraddress(wraddress),
	.wren(wren),
	.rden(rden)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin 
#0 clock=1'b0;                         
#0 rdaddress=4'd7;
#0 wraddress=4'd7;
#0 data=8'd200;
#0 rden=1'b1;
#0 wren=1'b0;	
#12 wren=1'b1;
#10 wraddress=4'd5;
#2 data=8'd20;
#10 rdaddress=4'd5;																		
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#5 clock=~clock;                                                                                                    
// --> end                                             
end                                                    
endmodule

